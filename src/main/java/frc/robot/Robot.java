/*----------------------------------------------------------------------------*/
/* Copyright (c) 2017-2018 FIRST. All Rights Reserved.                        */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/

package frc.robot;

import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;

import com.ctre.phoenix.motorcontrol.can.BaseMotorController;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;

import frc.robot.interfaces.*;
import frc.robot.sensors.*;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.util.*;


/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.gradle file in the
 * project.
 */
public class Robot extends TimedRobot {
	// IMPORTANT MAKE SURE THAT THIS CONSTANT IS SET TO TRUE IF USING COMPETITION BOT!
	// use this constant to switch between competition and practice bot
	public static final boolean COMPETITION_BOT_CONFIG = true;

  public static ExampleSubsystem m_subsystem = new ExampleSubsystem();
  public static OI m_oi;

  Command m_autonomousCommand;
  SendableChooser<Command> m_chooser = new SendableChooser<>();

  // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	// sensors
	
	HMCamera camera;
	
	ADXRS450_Gyro gyro; // gyro
	boolean hasGyroBeenManuallyCalibratedAtLeastOnce = false;
	
	Sonar sonar;
	
	HMAccelerometer accelerometer;
	
	// motorized devices
	
	public static /*I*/Drivetrain drivetrain;

	WPI_TalonSRX frontLeft;
	WPI_TalonSRX frontRight;
	BaseMotorController rearLeft; 
	BaseMotorController rearRight;
	
	public static /*I*/MiniDrivetrain miniDrivetrain;
	
	WPI_TalonSRX frontCenter;
	WPI_TalonSRX rearCenter;

	//boolean elevatorFlagUp = true;
	public static /*I*/Elevator elevatorControl;
	
	WPI_TalonSRX elevator;
	
	public static /*I*/Grasper grasper;
	
	BaseMotorController grasperLeft;
	BaseMotorController grasperRight;
	
	//boolean hingeFlagUp = false;
	public static /*I*/Hinge hingeControl;
	
	WPI_TalonSRX hinge; 
	
	//IWinch winchControl;
	
	//BaseMotorController winch;
	
	// pneumatic devices
	
	Compressor compressor; // the compressor's lifecycle needs to be the same as the robot
	
	public static /*I*/Jack jack;
	//boolean largeDriveTrainSelected = false; // by default we assume small drivetrain is down
	
	// joysticks and gamepad
	
	//ControllerBase control;
	
	//Joystick joyLeft, joyRight;
	//Joystick gamepad;
	
	//misc. 
	
	GameData gameData;
	
	//Auton auton = null; // autonomous stuff
	
	PositionTracker tracker;

  // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

  /**
   * This function is run when the robot is first started up and should be
   * used for any initialization code.
   */
  @Override
  public void robotInit() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    // sensors
        
    sonar = new Sonar(Ports.Analog.SONAR); 
        
    gyro = new ADXRS450_Gyro(SPI.Port.kOnboardCS0); // we want to instantiate before we pass to drivetrain	

    gyro.calibrate(); 
    gyro.reset();

    camera = new HMCamera("GRIP/myContoursReport");

    accelerometer = new HMAccelerometer();

    // motorized devices

    if (COMPETITION_BOT_CONFIG) {
      frontLeft = new WPI_TalonSRX(Ports.CAN.LEFT_FRONT);
      frontRight = new WPI_TalonSRX(Ports.CAN.RIGHT_FRONT);
      rearLeft = new WPI_TalonSRX(Ports.CAN.LEFT_REAR);
      rearRight= new WPI_TalonSRX(Ports.CAN.RIGHT_REAR);	
    } else {
      frontLeft = new WPI_TalonSRX(Ports.CAN.LEFT_FRONT);
      frontRight = new WPI_TalonSRX(Ports.CAN.RIGHT_FRONT);
      rearLeft = new WPI_VictorSPX(Ports.CAN.LEFT_REAR);
      rearRight= new WPI_VictorSPX(Ports.CAN.RIGHT_REAR);
    }

    frontCenter= new WPI_TalonSRX(Ports.CAN.FRONT_CENTER);
    rearCenter= new WPI_TalonSRX(Ports.CAN.REAR_CENTER);

    elevator = new WPI_TalonSRX(Ports.CAN.ELEVATOR);

    if (COMPETITION_BOT_CONFIG) {
      grasperLeft = new WPI_TalonSRX(Ports.CAN.GRASPER_LEFT);
      grasperRight = new WPI_TalonSRX(Ports.CAN.GRASPER_RIGHT);
    } else {
      grasperLeft = new WPI_VictorSPX(Ports.CAN.GRASPER_LEFT);
      grasperRight = new WPI_VictorSPX(Ports.CAN.GRASPER_RIGHT);
    }

    hinge = new WPI_TalonSRX(Ports.CAN.HINGE);

    //winch = new WPI_TalonSRX(Ports.CAN.WINCH);


    tracker = new PositionTracker();


    if (COMPETITION_BOT_CONFIG) {
      jack = new Jack();
      //jack = new EmulatedJack();
      
      drivetrain = new Drivetrain( frontLeft, frontRight, rearLeft, rearRight, gyro, this);	
      //drivetrain = new EmulatedDrivetrain(jack, tracker);	
      
      miniDrivetrain = new MiniDrivetrain(frontCenter, rearCenter, gyro, this, camera);
      //miniDrivetrain = new EmulatedMiniDrivetrain(jack, tracker);
      
      hingeControl = new Hinge(hinge, this);
      //hingeControl = new EmulatedHinge();		
      
      elevatorControl = new Elevator(elevator, hingeControl, this);
      //elevatorControl = new EmulatedElevator(hingeControl, tracker);
      
      grasper = new Grasper(grasperLeft, grasperRight, sonar, this);
      //grasper = new EmulatedGrasper(hingeControl, elevatorControl);
      
      //winchControl = new Winch(winch, this);
      //winchControl = new EmulatedWinch();
    } else {
      jack = new Jack();
      //jack = new EmulatedJack();
      
      drivetrain = new Drivetrain( frontLeft, frontRight, rearLeft, rearRight, gyro, this);	
      //drivetrain = new EmulatedDrivetrain(jack, tracker);	
      
      miniDrivetrain = new MiniDrivetrain(frontCenter, rearCenter, gyro, this, camera);
      //miniDrivetrain = new EmulatedMiniDrivetrain(jack, tracker);
      
      hingeControl = new Hinge(hinge, this);
      //hingeControl = new EmulatedHinge();		
      
      elevatorControl = new Elevator(elevator, hingeControl, this);
      //elevatorControl = new EmulatedElevator(hingeControl, tracker);
      
      grasper = new Grasper(grasperLeft, grasperRight, sonar, this);
      //grasper = new EmulatedGrasper(hingeControl, elevatorControl);
      
      //winchControl = new Winch(winch, this);
      //winchControl = new EmulatedWinch();
    }

    // pneumatic devices

    compressor = new Compressor();
    compressor.checkCompressor();

    // joysticks and gamepad

    //joyLeft = new Joystick(Ports.USB.LEFT); 
    //joyRight = new Joystick(Ports.USB.RIGHT);

    //gamepad = new Joystick(Ports.USB.GAMEPAD);

    //control = new ControllerBase(gamepad, joyLeft, joyRight);	

    // misc.

    gameData = new GameData();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    
    // OI must be constructed after subsystems. If the OI creates Commands
    //(which it very likely will), subsystems are not guaranteed to be
    // constructed yet. Thus, their requires() statements may grab null
    // pointers. Bad news. Don't move it.
    m_oi = new OI();
    m_chooser.setDefaultOption("Default Auto", new ExampleCommand());
    // chooser.addOption("My Auto", new MyAutoCommand());
    SmartDashboard.putData("Auto mode", m_chooser);
  }

  /**
   * This function is called every robot packet, no matter the mode. Use
   * this for items like diagnostics that you want ran during disabled,
   * autonomous, teleoperated and test.
   *
   * <p>This runs after the mode specific periodic functions, but before
   * LiveWindow and SmartDashboard integrated updating.
   */
  @Override
  public void robotPeriodic() {
  }

  /**
   * This function is called once each time the robot enters Disabled mode.
   * You can use it to reset any subsystem information you want to clear when
   * the robot is disabled.
   */
  @Override
  public void disabledInit() {
  }

  @Override
  public void disabledPeriodic() {
    Scheduler.getInstance().run();
  }

  /**
   * This autonomous (along with the chooser code above) shows how to select
   * between different autonomous modes using the dashboard. The sendable
   * chooser code works with the Java SmartDashboard. If you prefer the
   * LabVIEW Dashboard, remove all of the chooser code and uncomment the
   * getString code to get the auto name from the text box below the Gyro
   *
   * <p>You can add additional auto modes by adding additional commands to the
   * chooser code above (like the commented example) or additional comparisons
   * to the switch structure below with additional strings & commands.
   */
  @Override
  public void autonomousInit() {
    m_autonomousCommand = m_chooser.getSelected();

    /*
     * String autoSelected = SmartDashboard.getString("Auto Selector",
     * "Default"); switch(autoSelected) { case "My Auto": autonomousCommand
     * = new MyAutoCommand(); break; case "Default Auto": default:
     * autonomousCommand = new ExampleCommand(); break; }
     */

    // schedule the autonomous command (example)
    if (m_autonomousCommand != null) {
      m_autonomousCommand.start();
    }
  }

  /**
   * This function is called periodically during autonomous.
   */
  @Override
  public void autonomousPeriodic() {
    Scheduler.getInstance().run();
  }

  @Override
  public void teleopInit() {
    // This makes sure that the autonomous stops running when
    // teleop starts running. If you want the autonomous to
    // continue until interrupted by another command, remove
    // this line or comment it out.
    if (m_autonomousCommand != null) {
      m_autonomousCommand.cancel();
    }
  }

  /**
   * This function is called periodically during operator control.
   */
  @Override
  public void teleopPeriodic() {
    Scheduler.getInstance().run();
  }

  /**
   * This function is called periodically during test mode.
   */
  @Override
  public void testPeriodic() {
  }

  public void updateToSmartDash()	{
  }
}
